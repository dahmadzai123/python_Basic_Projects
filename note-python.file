0-Python:__python is a high level interpreting programing language knowing for it is easy to read syntax.

1-Print:__print functin is used to out put data to the standart out put device like console or terminal. it can display string, numbers, and other objects.

2-String:__in python a string is a sequence of charactrs enclosed in qouts either single qout or double.string can inclode letters, numbers symbols.

3-Data Type:__data types are the classification or organization of items.

4-Numbers:__integers(int) floating point numbers(float) flaot is accepting decimal numbers, and complexe numbers.

BOOLEAN__ represent two falues true and false.

STRING__ unicode charecters used to store text data.

LIST_-colection of items. which means their element can be changed. For example, list((1, 2, 3)) would convert the tuple (1, 2, 3) to the list [1, 2, 3], and list("hello") would convert the string "hello" to the list ['h', 'e', 'l', 'l', 'o'].

TUPLE__ is similer to list but can not be change. tuple are creating by placing all the items inside the parentheses seprating by cammas.

set--An unordered collection of unique items. Sets are mutable and are created by placing all the items (elements) inside curly braces {}, separated by commas. Since sets are unordered, they do not record element position or allow duplicate entries.

NoneType: This type has a single value, None, used to signify the absence of a value or a null value.

5-Operations:__operation are action that can be performed on vareibles or values these opration can be in sevral types like subtraction, multipcation, calculation, modulus, remainder of devisin exponentiation, devisin + - / * % ** //. (True or False).
Examples: == (equal to), != (not equal to), > (greater than), < (less than), >= (greater than or equal to), <= (less than or equal to)

6-Type conversion:__Type conversion in Python refers to the process of converting the value of one data type to another.

7-F-String:__Strings
Accessing individual characters in a string by their position (index). Python indices start at 0 for the first element.

python
Copy code
my_string = "Hello, World!"
print(my_string[0])  # Output: H
print(my_string[7])  # Output: W
8-Subscript:__In Python, a subscript notation is used to access elements of sequence data types like strings, lists, tuples, and other iterable objects
Lists
Accessing elements in a list by their index. Lists are mutable, so you can also assign new values to positions in the list.

python
Copy code
my_list = [10, 20, 30, 40, 50]
print(my_list[2])  # Output: 30
my_list[2] = 35
print(my_list)  # Output: [10, 20, 35, 40, 50]
Tuples
Tuples are similar to lists, but they are immutable. You can access elements by their index but cannot change them.

python
Copy code
my_tuple = (1, 2, 3, 4, 5)
print(my_tuple[1])  # Output: 2
Dictionaries
Accessing the value associated with a specific key. Keys can be of any immutable type.

python
Copy code
my_dict = {'a': 1, 'b': 2, 'c': 3}
print(my_dict['b'])  # Output: 2
Slicing
Subscript notation can also be used to access a slice (sub-section) of a sequence using the colon : operator.

python
Copy code
my_list = [10, 20, 30, 40, 50]
print(my_list[1:3])  # Output: [20, 30]
Negative Indexing
Python also supports negative indexing, where -1 refers to the last item, -2 to the second last, and so on.

python
Copy code
my_list = [10, 20, 30, 40, 50]
print(my_list[-1])  # Output: 50
print(my_list[-2])  # Output: 40

9-Type error:__In Python, a TypeError occurs when an operation or function is applied to an object of inappropriate type.
10-Conditinl Statements:__Conditional statements in Python are used to execute a specific block of code if a certain condition is true.
if condition:
    # block of code to execute if the condition is true
elif another_condition:
    # block of code to execute if the condition is false and another_condition is true
else:
    # block of code to execute if all the conditions above are false
11-Logical Operators:__Logical operators in Python are used to combine conditional statements and to evaluate whether a certain condition (or set of conditions) is true or false. 
a = 10
b = 20
c = 30

# Using 'and' operator
if a > 5 and b > 15:
    print("Both conditions are true")

# Using 'or' operator
if a > 15 or b > 15:
    print("At least one of the conditions is true")

# Using 'not' operator
if not a > 15:
    print("a is not greater than 15")

12-code Blocks:__In Python, code blocks are sections of code that are grouped together and intended to be executed as a unit. 
for item in iterable:
    # This is a code block
    print(item)
13-Scope:_
14-Randomisation:__Randomization in Python involves generating random numbers or selecting random elements from a sequence.
random_integer = random.randint(1, 10)  # Random integer between 1 and 10
print(random_integer)

15-Python Lists:__Python lists are one of the most versatile data types available in the language
Creating Lists
A list is created by placing all the items (elements) inside square brackets [], separated by commas.

python
Copy code
my_list = [1, 2, 3, 4, 5]
names = ['Alice', 'Bob', 'Charlie']
mixed = [1, 'Alice', True, 2.34]
Accessing List Items
You can access items in a list by referring to the index number. Note that indices in Python start at 0.

python
Copy code
print(my_list[0])  # Outputs: 1
print(names[1])    # Outputs: Bob
Changing List Items
Lists are mutable, meaning their elements can be changed.

python
Copy code
my_list[0] = 100
print(my_list)  # Outputs: [100, 2, 3, 4, 5]
List Slicing
You can return a range of elements by specifying a start and an end point in the index.

python
Copy code
print(my_list[1:3])  # Outputs: [2, 3]
Adding Items
Items can be added to the end of the list using the append() method, or at a specified index using the insert() method.

python
Copy code
my_list.append(6)
my_list.insert(0, 0)
Removing Items
Items can be removed with the remove() method, or removed at a specified index with pop() or the del keyword.

python
Copy code
my_list.remove(6)  # Removes the first occurrence of 6
popped_item = my_list.pop(1)  # Removes and returns the item at index 1
del my_list[0]  # Deletes the item at index 0
List Length
To determine how many items a list has, use the len() function.

python
Copy code
print(len(my_list))
16-For loops:__In Python, a for loop is used to iterate over a sequence (such as a list, tuple, dictionary, set, or string) or other iterable objects.
fruits = ['apple', 'banana', 'cherry']
for fruit in fruits:
    print(fruit)
17-Range:-__Iterating over a range of numbers:
python
Copy code
for number in range(5):
    print(number)
This loop will print numbers from 0 to 4. The range(5) function generates a sequence of numbers from 0 up to (but not including) 5.

19-Functions:__In Python, a function is a block of organized, reusable code that is used to perform a single, related action. 
Defining a Function
You can define functions to provide the required functionality. Here are simple rules to define a function in Python:

def add(x, y):
    """This function adds two numbers"""
    return x + y

# Now you can call the add function
result = add(5, 3)
print(result)  # Output: 8

21-while loops:__A while loop in Python is used to repeatedly execute a block of statements as long as a given condition is true. 
count = 0
while count < 5:
    print("The count is:", count)
    count += 1
This loop prints the count from 0 to 4. The count variable is incremented by 1 in each iteration, and once count becomes equal to 5, the condition count < 5 becomes false, and the loop terminates.